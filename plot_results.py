import numpy as np
import matplotlib.pyplot as plt

features = np.load("features_tensor.npy")
reconstructed = np.load("cp_reconstruction.npy")
anomalies = np.load("anomalies.npy")
ewma = np.load("ewma_stat.npy")
frames = np.arange(len(features))

# --- EWMA Monitoring Chart ---
plt.figure(figsize=(10, 4))
plt.plot(frames, ewma, label="EWMA Monitoring Stat", linewidth=2)
plt.axhline(np.mean(ewma) + 3*np.std(ewma), color='r', linestyle='--', label="UCL (3Ïƒ)")
plt.title("EWMA Control Chart")
plt.xlabel("Frame")
plt.ylabel("Monitoring Stat")
plt.legend()
plt.grid(True)
plt.tight_layout()
plt.show()

# --- Anomaly Magnitude by Feature Group ---
plt.figure(figsize=(12, 6))
plt.plot(frames, np.linalg.norm(anomalies[:, 0:4], axis=1), label="Centerline (cx, cy)", linewidth=2)
plt.plot(frames, np.linalg.norm(anomalies[:, 4:8], axis=1), label="Side Geometry", linewidth=2)
plt.plot(frames, np.linalg.norm(anomalies[:, 8:12], axis=1), label="Top Geometry", linewidth=2)
plt.title("Anomaly Magnitude by Feature Category")
plt.xlabel("Frame")
plt.ylabel("L2 Norm of Anomaly")
plt.legend()
plt.grid(True)
plt.tight_layout()
plt.show()

# --- Actual vs Reconstructed Comparison: Jet Angle (Side + Top) ---
plt.figure(figsize=(12, 5))
plt.plot(frames, features[:, 4], label="Actual Side Angle", alpha=0.7)
plt.plot(frames, reconstructed[:, 4], label="Reconstructed Side Angle", linestyle='--')
plt.plot(frames, features[:, 8], label="Actual Top Angle", alpha=0.7)
plt.plot(frames, reconstructed[:, 8], label="Reconstructed Top Angle", linestyle='--')
plt.title("Jet Angle: Actual vs Reconstructed")
plt.xlabel("Frame")
plt.ylabel("Angle (degrees)")
plt.legend()
plt.grid(True)
plt.tight_layout()
plt.show()

# --- Actual vs Reconstructed: Symmetry (Side + Top) ---
plt.figure(figsize=(12, 5))
plt.plot(frames, features[:, 6], label="Actual Side Symmetry", alpha=0.7)
plt.plot(frames, reconstructed[:, 6], label="Reconstructed Side Symmetry", linestyle='--')
plt.plot(frames, features[:, 10], label="Actual Top Symmetry", alpha=0.7)
plt.plot(frames, reconstructed[:, 10], label="Reconstructed Top Symmetry", linestyle='--')
plt.title("Jet Symmetry: Actual vs Reconstructed")
plt.xlabel("Frame")
plt.ylabel("Symmetry Score")
plt.legend()
plt.grid(True)
plt.tight_layout()
plt.show()

# --- Actual vs Reconstructed: Cone Width (Side + Top) ---
plt.figure(figsize=(12, 5))
plt.plot(frames, features[:, 5], label="Actual Side Width", alpha=0.7)
plt.plot(frames, reconstructed[:, 5], label="Reconstructed Side Width", linestyle='--')
plt.plot(frames, features[:, 9], label="Actual Top Width", alpha=0.7)
plt.plot(frames, reconstructed[:, 9], label="Reconstructed Top Width", linestyle='--')
plt.title("Cone Width: Actual vs Reconstructed")
plt.xlabel("Frame")
plt.ylabel("Width (pixels)")
plt.legend()
plt.grid(True)
plt.tight_layout()
plt.show()
